@model IBBPortal.ViewModels.ProjectMapDetailViewModel
<!-- Alert for Exceptions -->
@if (@TempData["SuccessTitle"] is not null)
{
    <div class="alert bg-gradient-success alert-dismissible fade show border-0" role="alert">
        <h4 class="alert-heading text-white">
            <i class="fas fa-check"></i>
            @TempData["SuccessTitle"]
            <button type="button" class="close text-white" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </h4>
        <p class="text-white">@TempData["SuccessMessage"]</p>
    </div>
}

<div class="row">
    <div class="justify-content-between py-2 col-12 d-flex">
        <h1 class="h3">@Model.ProjectTitle</h1>
    </div>
</div>
<div class="card shadow mb-4">
    @await Html.PartialAsync("~/Views/Project/_ManageNavigation.cshtml",
    new ViewDataDictionary(ViewData)
    {
        { "Id", Model.ProjectID }
    })
    <div class="card-body" style="padding:0px;">
        <div class="tab-content" id="formContent">
            <div class="tab-pane fade active show" id="tag" role="tabpanel" aria-labelledby="tag-tab">
                <script src="https://unpkg.com/@Html.Raw("@")google/markerclustererplus@4.0.1/dist/markerclustererplus.min.js"></script>
                <div id="mapDetail" style="height: 100vh; min-height: 600px; width: 100%;">


                </div>
                <div class="loadingDiv">
                    <div class="loadingIcon">
                        <svg version="1.1" id="L2" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                             viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">
                        <circle fill="none" stroke="#0a1a33" stroke-width="4" stroke-miterlimit="10" cx="50" cy="50" r="48" />
                        <line fill="none" stroke-linecap="round" stroke="#0a1a33" stroke-width="4" stroke-miterlimit="10" x1="50" y1="50" x2="85" y2="50.5">
                        <animateTransform attributeName="transform"
                                          dur="2s"
                                          type="rotate"
                                          from="0 50 50"
                                          to="360 50 50"
                                          repeatCount="indefinite" />
                            </line>
                        <line fill="none" stroke-linecap="round" stroke="#0a1a33" stroke-width="4" stroke-miterlimit="10" x1="50" y1="50" x2="49.5" y2="74">
                        <animateTransform attributeName="transform"
                                          dur="15s"
                                          type="rotate"
                                          from="0 50 50"
                                          to="360 50 50"
                                          repeatCount="indefinite" />
                            </line>
                            </svg>
                    </div>
                </div>
                <div class="floatingFormForDetailPage shadow">


                    <form class="form-inline">

                        <input type="text" id="projectTitle" placeholder="Proje ara..." name="projectTitle" class="form-control">

                        <label for="showIntersectingProjects"><input type="checkbox" id="showIntersectingProjects" placeholder="Çakışanlar" name="showProjectBorders"> Çakışanlar</label>


                        <label for="closeProjectsKM">Yakındakiler (m)</label>
                        <input type="range" id="closeProjectsKM" class="form-range" min="100" max="10000" oninput="this.nextElementSibling.value = this.value+'m'" value="250"><output>250m</output>
                        &nbsp;
                        <button id="toggleFilter" type="button" class="btn btn-success"><i class="fa fa-filter"></i> Göster</button>

                        <input name="projectTitle" id="projectTitle" type="hidden" value="@Model.ProjectTitle" />
                        <input name="projectID" id="projectID" type="hidden" value="@Model.ProjectID" />
                    </form>
                    <span id="closeFilter"><i class="fa fa-times-circle"></i></span>
                </div>
                <div class="floatingFormClosedForDetailPage">
                    <form class="form-inline">
                        <button id="openFilter" type="button" class="btn btn-success"><i class="fa fa-filter"></i></button>
                    </form>
                </div>

            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAMYG7cNdDYUUxT8FSVxCtaxvSv9Ic2UZw&libraries=&v=weekly"></script>
    <script>
        var map;
        let latValue = parseFloat(("@Model.ProjectLatitude").split(",").join("."));
        let lngValue = parseFloat(("@Model.ProjectLongitude").split(",").join("."));
        function initMap() {

            map = new google.maps.Map(document.getElementById("mapDetail"), {
                center: { lat: latValue, lng: lngValue },
                disableDefaultUI: true,
                zoomControl: true,
                zoom: 18,
                styles: [{ "featureType": "water", "elementType": "geometry", "stylers": [{ "color": "#3399CC" }, { "lightness": 17 }] }, { "featureType": "landscape", "elementType": "geometry", "stylers": [{ "color": "#f5f5f5" }, { "lightness": 20 }] }, { "featureType": "road.highway", "elementType": "geometry.fill", "stylers": [{ "color": "#ffffff" }, { "lightness": 17 }] }, { "featureType": "road.highway", "elementType": "geometry.stroke", "stylers": [{ "color": "#ffffff" }, { "lightness": 29 }, { "weight": 0.2 }] }, { "featureType": "road.arterial", "elementType": "geometry", "stylers": [{ "color": "#ffffff" }, { "lightness": 18 }] }, { "featureType": "road.local", "elementType": "geometry", "stylers": [{ "color": "#ffffff" }, { "lightness": 16 }] }, { "featureType": "poi", "elementType": "geometry", "stylers": [{ "color": "#f5f5f5" }, { "lightness": 21 }] }, { "featureType": "poi.park", "elementType": "geometry", "stylers": [{ "color": "#dedede" }, { "lightness": 21 }] }, { "elementType": "labels.text.stroke", "stylers": [{ "visibility": "on" }, { "color": "#ffffff" }, { "lightness": 16 }] }, { "elementType": "labels.text.fill", "stylers": [{ "saturation": 36 }, { "color": "#333333" }, { "lightness": 40 }] }, { "elementType": "labels.icon", "stylers": [{ "visibility": "off" }] }, { "featureType": "transit", "elementType": "geometry", "stylers": [{ "color": "#f2f2f2" }, { "lightness": 19 }] }, { "featureType": "administrative", "elementType": "geometry.fill", "stylers": [{ "color": "#fefefe" }, { "lightness": 20 }] }, { "featureType": "administrative", "elementType": "geometry.stroke", "stylers": [{ "color": "#fefefe" }, { "lightness": 17 }, { "weight": 1.2 }] }],
            });

        }

        
    </script>
    <script src="~/js/project_map.js"></script>
    <script>
        var currentProject = {
            latitude: latValue,
            longitude: lngValue,
            projectTitle: "@Html.Raw(Model.ProjectTitle)",
            serviceAreaTitle: "@Html.Raw(Model.ServiceAreaTitle)",
            responsibleDepartmentTitle: "@Html.Raw(Model.ServiceAreaTitle)",
            projectImportanceTitle: "@Html.Raw(Model.ProjectImportanceTitle)",
            projectID: @Html.Raw(Model.ProjectID),
            coordinates: "@Html.Raw(Model.coordinates)",

        };

        $(document).ready(function () {
           /* var mainmarkers = [];
            mainmarkers.push(showMarker(currentProject));

            new MarkerClusterer(map, mainmarkers, {
                imagePath:
                    "https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m",
            });

            showBorders(currentProject, true);*/
            buildMap();
        });

        
    </script>
    
}
